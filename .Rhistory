geom_tile(aes(fill=colorproportionsincutlevel))
View(diamonds)
diamonds %>%
count(cut,carat,price)
diamonds %>%
count(cut,carat)
diamonds %>%
count(cut,carat,price)
diamonds %>%
count(cut,carat,price) %>%
group_by(price)
diamonds %>%
count(cut,carat,price) %>%
group_by(cut)
ggplot(diamonds, aes(x=cut,y=price)) +
geom_boxplot()
diamonds %>%
ggplot(aes(x=cut,y=carat)) +
geom_tile(aes(fill=price))
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_tile(aes(fill=cut))
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
outlier.color = cut, mapping = aes(group=cut_width(price,10000))
)
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
apping = aes(group=cut_width(price,10000))
)
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
mapping = aes(group = cut_width(price,10000))
)
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
mapping = aes(group = cut_width(price,1000))
)
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
mapping = aes(group = cut_width(price,1000))
)
diamonds %>%
ggplot(aes(x=cut,y=carat)) +
geom_boxplot()
diamonds %>%
ggplot(aes(x=price,y=carat)) +
geom_boxplot(
mapping = aes(group = cut_width(price,1000))
)
diamonds %>%
ggplot(aes(x=cut,y=carat)) +
geom_boxplot()
diamonds %>%
ggplot(aes(x=cut,y=price)) +
geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
# load the library tidyr here
library(tidyr)
# recall table4a
table4a
#table4a %>% gather(1999,2000,
#                   key="year",
#                   value="cases")
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`
key="year",
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`,
key="year",
value="cases")
preg %>%
gather(`male`,`female`,
key = "pregnant",
value = "count")
preg %>%
spread(key=pregnant,
value = "count")
preg %>%
gather(`pregnant`,`male`,`female`,
key = "pregnant",
value = "count")
preg %>%
gather(`male`,`female`,
key = "pregnant",
value = "count")
preg %>%
gather(`male`,`female`,
key = "gender",
value = "count")
?separate
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill='x')
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill='right')
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'left')
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'warn')
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"))
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'left')
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"),extra='merge')
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'left')
?unite
View(airquality)
# Answer:
airquality %>%
filter(temp>mean(temp)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
# load the library tidyr here
library(tidyr)
library(dplyr)
# Answer:
airquality %>%
filter(temp>mean(temp)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
# Answer:
airquality %>%
filter(Temp>mean(Temp)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
# Answer:
airquality %>%
filter(Temp>mean(Temp),!is.na(Ozone)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
?mean
# Answer:
f <- function(days = c()) {
airquality %>%
group_by(Day) %>%
summarize(avg_ozone = mean(Ozone,na.rm = TRUE)) %>%
filter(Day %in% days)
}
f(c(1,3,5))
# Answer:
get_avg_ozone <- function(days = c()) {
airquality %>%
group_by(Day) %>%
summarize(avg_ozone = mean(Ozone,na.rm = TRUE)) %>%
filter(Day %in% days)
}
get_avg_ozone(c(1,3,5))
View(f)
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"),extra='drop')
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'left')
knitr::opts_chunk$set(echo = TRUE)
# load the library tidyr here
library(tidyr)
library(dplyr)
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`,
key ="year",
value ="cases")
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`,
key ="year",
value ="cases")
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`,
key ="year",
value ="cases")
# recall table4a
table4a
table4a %>% gather(1999,2000,
key ="year",
value ="cases")
# recall table4a
table4a
table4a %>% gather(`1999`,`2000`,
key ="year",
value ="cases")
preg <-tribble(~pregnant, ~male, ~female,
"yes", NA, 10,
"no", 20, 12)
preg
preg %>%
gather(`male`,`female`,
key = "gender",
value = "count")
tibble(x=c("a,b,c",
"d,e,f,g",
"h,i,j")) %>%
separate(x, c("one","two","three"),extra='drop')
tibble(x=c("a,b,c",
"d,e",
"f,g,i")) %>%
separate(x, c("one","two","three"),fill = 'left')
# Answer:
airquality %>%
filter(Temp>mean(Temp),!is.na(Ozone)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
# Answer:
get_avg_ozone <- function(days = c()) {
airquality %>%
group_by(Day) %>%
summarize(avg_ozone = mean(Ozone,na.rm = TRUE)) %>%
filter(Day %in% days)
}
get_avg_ozone(c(1,3,5))
# Answer:
get_avg_ozone <- function(days = c()) {
airquality %>%
group_by(Day) %>%
summarize(avg_ozone = mean(Ozone,na.rm = TRUE)) %>%
filter(Day %in% days)
}
get_avg_ozone(c(1,3,5))
# Answer:
airquality %>%
filter(Temp>mean(Temp),!is.na(Ozone)) %>%
mutate(ratio_OZ_TEMP = Ozone/Temp)
airquality.columns()
colnames(airquality)
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]]) - new_df[[name]]                            )/sd(new_df[[name]])
}
return(new_df)
}
standard_var(c("Ozone"))
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]],na.rm = TRUE) -                                new_df[[name]])/sd(new_df[[name]])
}
return(new_df)
}
standard_var(c("Ozone"))
new_df[[Ozone]]
new_df[["Ozone"]]
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]],na.rm = TRUE) -                                new_df[[name]])/sd(new_df[[name]])
}
return(new_df)
}
colnames(standard_var(c("Ozone")))
new_df["Ozone"]
new_df
clear
new_air <- standard_var(c("Ozone"))
head(new_air)
new_air[[Ozone]]
new_air[["Ozone"]]
mean(new_air[["Ozone"]],na.rm=TRUE)
mean(new_air[["Ozone"]],na.rm=TRUE) - new_air[["Ozone"]]
sd(new_air[["Ozone"]])
sd(new_air[["Ozone"]],na.rm=TRUE)
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]],na.rm = TRUE) -              new_df[[name]])/sd(new_df[[name]],na.rm = TRUE)
}
return(new_df)
}
colnames(standard_var(c("Ozone")))
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]],na.rm = TRUE) -              new_df[[name]])/sd(new_df[[name]],na.rm = TRUE)
}
return(new_df)
}
standard_var(c("Ozone"))
# Answer:
standard_var <- function(names) {
new_df <- airquality
for (name in names) {
var_name = paste("standardized",name,sep = "_")
new_df[[var_name]] <- (mean(new_df[[name]],na.rm = TRUE) -              new_df[[name]])/sd(new_df[[name]],na.rm = TRUE)
}
return(new_df)
}
standard_var(c("Ozone","Solar.R","Wind","Temp"))
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library("tidyr")
library("knitr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_wide = spread(credit, key=Variable, value=Value)
knitr:kable( head(credit_wide) )
credit_wide = spread(credit, key=Variable, value=Value)
knitr:kable( head(credit_wide) )
library("readxl")
library("tidyr")
library("knitr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
library("readxl")
library("tidyr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_wide = spread(credit, key=Variable, value=Value)
knitr:kable( head(credit_wide) )
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library("tidyr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_wide = spread(credit, key=Variable, value=Value)
knitr:kable( head(credit_wide) )
library("readxl")
library("tidyr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_wide = spread(credit, key=Variable, value=Value)
knitr::kable( head(credit_wide) )
library("readxl")
library("tidyr")
library("dplyr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_wide = spread(credit, key=Variable, value=Value)
knitr::kable( head(credit_wide) )
inner_ex <- inner_join(credit_side,credit_names,by='ID')
inner_ex <- inner_join(credit_wide,credit_names,by='ID')
library("readxl")
library("tidyr")
library("dplyr")
credit <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Credit Data")
credit_names <- read_excel("Lecture14_Part2_credit_data_excel.xlsx", sheet="Names")
credit_wide = spread(credit, key=Variable, value=Value)
knitr::kable( head(credit_wide) )
inner_ex <- inner_join(credit_wide,credit_names,by='ID')
left_ex <- left_join(credit_wide,credit_names, by='ID')
right_ex <- right_join(credit_wide,credit_names,by='ID')
full_ex <- full_join(credit_wide,credit_names,by='ID')
knitr::opts_chunk$set(echo = TRUE)
# data
insurance_data <- read.csv("insurance_policy.csv")
setwd("/mnt/shared/Polymathy/University/UMich/Fall 2022/STAT305-DataScience/stat305project")
# data
insurance_data <- read.csv("insurance_policy.csv")
# data
insurance_data <- read.csv("Insurance_policy.csv")
knitr::kable(head(insurance_data))
library("ggplot2")
df = read.csv("Insurance_policy.csv")
# read in the data in this codeblock
# first make sure this Rmd file and your csv file are in the same folder,
# you need to set the working directory under the Session menu (RStudio top)
# to the source file location
df = read.csv("Insurance_policy.csv")
# load any libraries in this codeblock, not later in the file,
# do not install packages in any Rmd file! Instead install packages
# at your console
#library(packagename)
library(ggplot2)
library(dplyr)
View(df)
# how many rows are incomplete? Wow, 27% of the rows are incomplete rows.
sum( !complete.cases(df)  )
dim(df)
# make a mental note on how many rows and columns we have at the start
dim(df);
# we see in the summary how many missing values in each variable
summary(df);
# more visibly we can see the number of missing values in each variable this way
colSums( is.na(df)  );
# how many rows have 0 NAs, in other words, how many rows are complete?
sum( complete.cases(df) );
# how many rows are incomplete? Wow, 27% of the rows are incomplete rows.
sum( !complete.cases(df)  )
# make a mental note on how many rows and columns we have at the start
dim(df);
```{r}
# make a mental note on how many rows and columns we have at the start
dim(df)
```{r}
# make a mental note on how many rows and columns we have at the start
dim(df)
# we see in the summary how many missing values in each variable
summary(df)
# more visibly we can see the number of missing values in each variable this way
colSums( is.na(df)  );
# how many rows have 0 NAs, in other words, how many rows are complete?
sum( complete.cases(df) );
# how many rows are incomplete? Wow, 27% of the rows are incomplete rows.
sum( !complete.cases(df)  )
# confirm there are no missing values
colSums(  is.na(age_score))
# take age and score
age_score = select(df, age, score);
# only 37 rows are missing, instead of 42!
sum( !complete.cases(age-score));
# take age and score
age_score = select(df, age, score);
# only 37 rows are missing, instead of 42!
sum( !complete.cases(age_score));
# take only those rows that have both ozone and temp
age_score = age_score[ complete.cases(age_score), ];
# confirm there are no missing values
colSums(  is.na(age_score))
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
num_df
favstats(age)
library(mosaic
library(mosaic)
# load any libraries in this codeblock, not later in the file,
# do not install packages in any Rmd file! Instead install packages
# at your console
library(mosaic)
library(ggplot2)
library(dplyr)
favstats(age)
num_df
fav_stats(num_df$age)
for (col in num_df):
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
for (col in num_df){
print(col)
}
?rbind
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
for (col in num_df){
favstats(col)
}
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
for (col in num_df){
favstats(col)
}
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
for (col in num_df){
favstats(col);
}
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
for (col in num_df){
print(favstats(col))
}
num_df <- df %>%
select(age,education_num,cap_gain,
hours_per_week,score)
num_df
